!Тестування!

1.basic theory (what and why)

Тестування це процес перевірки різними способами коду програми на наявність у ній різноманітних помилок.

В загальному по маштабу тестування існують модульні(unit-тести) та функціональні тести:
- модульні тести це коли тестується якась одна функція чи метод
- функціональне тестування це коли тестуються глобальні функції програми, 
де враховується результат взаємодії багатьох функцій і методів, наприклад система авторизації чи складної логіки.

Також тести можуть бути ручними(коли ти сам вводиш якісь дані і переглядаєш результат) 
та автоматичними(пишуться спеціальні програми чи код для тестування інших програм чи коду), розглянемо лише автоматичне тестування.
Окрім вказаного раніше існують безліч інших видів тестування, таких як інтеграційне(тестування зв'язків), 
регресійне, системне, функціональне та нефункціональне, статичне та динамічне і багато інших, по інтернету навіть гуляє ввислів, 
який звучить так:
    Скільки програмістів, стільки і видів тестування!

У великих проектах в основному тестуванням можуть займатись окремі співробітники - тестувальники, 
які тільки цим і займаються. Але якщо це невелика команда, або окремого тестувальника нема, то усі тести пишуться самим програмістом.
Можливо тестування може показатись несуттєвим і програмісти які лише починають свій шлях дуже мало приділяють їм уваги, 
але в реальних проектах, навіть невеликих, тестування пишеться завжди і в дуже великих об'ємах майже на усе, 
що може впливати на роботу, навіть на функції читання та запису у БД.
Тестувати потрібно усі аспекти, які відносяться до вашого коду але не підключені бібліотеки чи іншу функціональність, 
яку надає Python чи Django.

І так, перейдемо до нашої сьогоднішньої теми, а саме Unit-тести.
Unit тестування коду являється невід'ємною частиною життєвого циклу розробки програмного забезпечення на Python(і не тільки). 
Вони гарантують, що система буде вести себе відповідно коли додається новий чи змінюється існуючий код, або ж виконується рефакторінг коду.
Вони виконуються після кожної зміни і перед деплоєм коду скажімо на сервер
Unit-тести наслідуються від unittest.TestCase, кожен тест повинен бути самостійним і як можна легшим для розуміння, 
без оптимізацій коду(існує вислів, що тести пишуться так легко, щоб на них самих не треба було писати інших тестів), 
тести можуть мати підтести subTest()
Також деякі помилки при тестуванні можуть бути очікувані, в таких випадках можна приміняти декоратор skip() та інші, 
які дозволяють пропускати тест.
Розглянемо типічний unit тест при написанні коду на прикладі калькулятору...
Усі тести можуть знаходитись у одному файлі, але це підходить лише для невеликих проектів або коли коду мало, 
в більшості випадків створюється окремий каталог, де створюються файли тести для тестування окремого функціоналу.

------------------------------------>

Django тест наслідується від стандартної бібліотеки Python unittest і підходить як для юніт- так і інтеграційного тестування. 
Він додає api який допомагає тестувати як веб так і специфічні для Django поведінки. Це дозволяє імітувати URL-запити, 
додавання тестових даних і перевіряти вихідні дані.
Також Django надає api(LiveServerTestCase) та інструменти для підключення та примінення різноманітних фреймворків для тестування, 
наприклад фреймворк Selenium для імітації поведінки користувача в реальному браузері.
Для написання тестів можна наслідуватись від любого з класів тестування 
Django (SimpleTestCase, TransactionTestCase, TestCase, LiveServerTestCase),або звичайної бібліотеки Python unittest.
Розглянемо типічні тести при написанні коду на бекенді Django
------------------------------------>
Трохи літератури:
https://habr.com/en/company/otus/blog/481806/
https://docs.python.org/3/library/unittest.html
https://developer.mozilla.org/ru/docs/Learn/Server-side/Django/Testing
https://djbook.ru/rel3.0/topics/testing/overview.html
